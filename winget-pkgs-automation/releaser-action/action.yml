name: WinGet Releaser
description: Publish new releases of your application to Windows Package Manager Community Repository easily.
inputs:
  identifier:
    required: true
    description: The PackageIdentifier of the package you want to release.
  version-regex:
    required: true
    description: The regex to use to extract the version from the tag name.
    default: '[0-9.]+'
  installers-regex:
    required: true
    description: The regex to match the installers.
    default: '.(exe|msi|msix|appx)(bundle){0,1}$'
  delete-previous-version:
    required: true
    description: Whether to delete the last version.
    default: 'false'
  token:
    required: true
    description: GitHub token to create pull request on Windows Package Manager Community Repository.
runs:
  using: composite
  steps:
    - name: Check runner OS and workflow trigger event
      run: |
        # Check runner OS and workflow trigger event
        if ($IsWindows -eq $false) {
          throw 'This action is only supported on Windows.'
        }
        if ('${{ github.event_name }}' -ne 'release') {
          throw 'This action is only supported on release event.'
        }
        If ('${{ github.event.action }}' -ne 'released') {
          throw 'This action is only supported on released event type.'
        }
      shell: pwsh
    - name: Checkout action repository
      uses: actions/checkout@v3
      with:
        persist-credentials: false
        repository: vedantmgoyal2009/vedantmgoyal2009
    - name: Checkout winget-pkgs repository
      uses: actions/checkout@v3
      with:
        path: winget-pkgs-automation/winget-pkgs
        repository: microsoft/winget-pkgs
        token: '${{ inputs.token }}'
    - name: Setup working environment
      run: |
        # Setup working environment
        Install-Module -Name powershell-yaml -Repository PSGallery -Scope CurrentUser -Force # Install powershell-yaml module
        # Set git user name, email and remotes
        git config --local user.name '${{ github.repository_owner }}'
        git config --local user.email '${{ github.event.repository.owner.id }}+${{ github.repository_owner }}@users.noreply.github.com'
        git remote rename origin upstream
        git remote add origin https://github.com/${{ github.repository_owner }}/winget-pkgs.git
        # Copy YamlCreate to Tools folder and set settings
        Copy-Item -Path ..\..\src\YamlCreate.ps1 -Destination .\YamlCreate.ps1 -Force
        git commit --all -m 'Update YamlCreate.ps1 with InputObject functionality' --quiet
        New-Item -ItemType File -Path "$env:LOCALAPPDATA\YamlCreate\Settings.yaml" -Force | Out-Null
        @'
        TestManifestsInSandbox: never
        SaveToTemporaryFolder: never
        AutoSubmitPRs: always
        ContinueWithExistingPRs: never
        SuppressQuickUpdateWarning: true
        EnableDeveloperOptions: true
        '@ | Set-Content -Path $env:LOCALAPPDATA\YamlCreate\Settings.yaml
      shell: pwsh
      working-directory: winget-pkgs-automation/winget-pkgs/Tools
      env:
        GITHUB_TOKEN: '${{ inputs.token }}'
    - name: Update manifests and publish
      run: |
        # Update manifests and publish
        $WinGetDev = (Resolve-Path -Path ..\..\wingetdev\wingetdev.exe).Path # Set wingetdev.exe path variable
        $PrBody = '### Pull request has been automatically created using ðŸ›« [WinGet Releaser](https://bittu.eu.org/docs/wr-intro).' # Set pull reuqest body
        . ..\..\src\Functions.ps1 # Import functions
        $Upgrade = [System.Management.Automation.PSObject] @{
          PackageIdentifier = '${{ inputs.identifier }}'
          PackageVersion = ('${{ github.event.release.tag_name }}' | Select-String -Pattern '${{ inputs.version-regex }}').Matches.Value
          InstallerUrls = $env:RELEASE_ASSETS | ForEach-Object { if ($_.name -match '${{ inputs.installers-regex }}') { $_.browser_download_url } }
          ReleaseNotesUrl = '${{ github.event.release.html_url }}'
          ReleaseDate = (Get-Date -Date '${{ github.event.release.published_at }}').ToString('yyyy-MM-dd')
        }
        If ('${{ inputs.delete-previous-version }}' -eq 'false' ? $true : $false) {
          . .\YamlCreate.ps1 -InputObject $Upgrade # Dot-source the script to get pull request body
        } Else {
          . .\YamlCreate.ps1 -InputObject $Upgrade -DeletePreviousVersion # Dot-source the script to get pull request body
        }
      working-directory: winget-pkgs-automation/winget-pkgs/Tools
      shell: pwsh
      env:
        GITHUB_TOKEN: ${{ inputs.token }}
        RELEASE_ASSETS: ${{ github.event.release.assets }}
branding:
  color: blue
  icon: upload-cloud
